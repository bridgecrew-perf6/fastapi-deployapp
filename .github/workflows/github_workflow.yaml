# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main
      - master

env:
  AWS_REGION: ${{secrets.AWS_DEFAULT_REGION}}                       # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: $ {{secrets.ECR_REPOSITORY}}                                  # set this to your Amazon ECR repository name
  CONTAINER_NAME: ${{secrets.DOCKER_IMAGE_NAME}}           # set this to the name of the container in the
                                                  # containerDefinitions section of your task definition
  DOCKER_FILE_PATH: $ {{secrets.DOCKER_FILE_PATH}}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}                 # set this to your Amazon ECS service name
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION_PATH }}   # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json


jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ${{env.DOCKER_FILE_PATH}}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{env.ECS_TASK_DEFINITION}}
          container-name: ${{env.CONTAINER_NAME}}
          image: ${{ steps.build-image.outputs.image }}

#      - name: Deploy Amazon ECS task definition
#        id: deploy-ecs-task-definition
#        env:
#          task_definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{env.ECS_SERVICE}}
#          cluster: ${{ env.ECS_CLUSTER}}
#        run: |
#          echo task_definition > task_definition.json
#          SERVICE_EXIST = aws ecs describe-services --cluster $cluster --services $service | jq '.failures == []'
#          TASK_NAME = $(aws ecs register-task-definition --cli-input-json file://task_definition.json)
#          TASK_FAMILY =
#          TASK_REVISION =
#          if [ $SERVICE_EXIST]; then
#             aws ecs update-service --cluster $cluster --service $service --task-definition "$TASK_FAMILY:$TASK_REVISION"
#          else
#             update aws-service.json with new task-definition name
#             aws ecs create-service file://infrastructure/aws-service.json
#          fi

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{env.ECS_SERVICE}}
          cluster: ${{ env.ECS_CLUSTER}}
          wait-for-service-stability: true

     